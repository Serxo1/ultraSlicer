{"version":3,"file":"visual.js","mappings":"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ACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,6BAA6B,8FAAoB;AACjD,6BAA6B,8FAAoB;AACjD;AACA,gCAAgC,8FAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,+EAAU;AAC3D;AACA,iCAAiC,gBAAgB;AACjD,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,8FAAoB;AACxE,oDAAoD,8FAAoB;AACxE;AACA;AACA;AACA;AACA;AACA,4BAA4B,8FAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oGAAoG;AAC7I;AACA;AACA;AACA;AACA;AACA,yBAAyB,8FAAoB;AAC7C,yBAAyB,8FAAoB;AAC7C;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8FAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,wGAAwG;AACrJ;AACA;AACA;AACA;AACA;AACA,qCAAqC,8FAAoB;AACzD,qCAAqC,8FAAoB;AACzD;AACA;AACA;AACA;AACA;AACA,wCAAwC,8FAAoB;AAC5D;AACA;AACA,iDAAiD,oFAAoF;AACrI;AACA,iBAAiB;AACjB;AACA,8EAA8E;AAC9E,SAAS;AACT;AACA;AACA,4BAA4B,kDAAkD;AAC9E;AACA,yEAAyE,gBAAgB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,GAAG,uBAAuB;AAC3F;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kFAAa;AACzC;AACA,oDAAoD,+EAAU;AAC9D,6BAA6B,gBAAgB;AAC7C,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;AACzC,qD;;;;;;;;;;;;;ACzOqE;AACD;AACW;AACQ;AACvF,iC;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AAC4E;AACL;AAChE;AACP;AACO;AACP;AACO;AACP;AACA;AACO;AACP;AACO;AACP;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8FAAoB;AACrD,iCAAiC,8FAAoB;AACrD;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,aAAa,2CAA2C,8FAAoB,+CAA+C;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mFAAsC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,sFAAyC;AAC9D;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,oFAAoF;AAChL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,uBAAuB;AACnH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,aAAa,8FAAoB,yEAAyE;AACtM;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,oEAAoE,iEAAiE;AAClL;AACA;AACA;AACA,iDAAiD,WAAW,aAAa,8FAAoB,4CAA4C;AACzI,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,oEAAoE,8GAA8G;AAC/N;AACA;AACA;AACA,iDAAiD,WAAW,aAAa,8FAAoB,4CAA4C;AACzI,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,4EAA4E;AACxK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,iEAAiE;AAC7J;AACA;AACA;AACA,iDAAiD,WAAW,aAAa,8FAAoB,4CAA4C;AACzI,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,+BAA+B;AAC3H;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,yDAAyD;AACrJ;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8FAAoB;AAC7C,yBAAyB,8FAAoB;AAC7C;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO,4BAA4B,2DAAW;AAC9C;AACA,wD;;;;;;UCpWA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;;;;;;;;ACN0C;AAK1C,IAAI,UAAU,GAAQ,SAAS,CAAC;AAChC,IAAI,OAAO,GAAQ,MAAM,CAAC,UAAU,CAAC,CAAC;AACtC,IAAI,iCAAiC,GAAkB;IACnD,IAAI,EAAE,mCAAmC;IACzC,WAAW,EAAE,aAAa;IAC1B,KAAK,EAAE,QAAQ;IACf,UAAU,EAAE,OAAO;IACnB,MAAM,EAAE,CAAC,OAAkC,EAAE,EAAE;QAC3C,IAAI,wDAAM,EAAE,CAAC;YACT,OAAO,IAAI,wDAAM,CAAC,OAAO,CAAC,CAAC;QAC/B,CAAC;QACD,MAAM,2BAA2B,CAAC;IACtC,CAAC;IACD,iBAAiB,EAAE,CAAC,QAAgB,EAAE,OAAiC,EAAE,YAAoB,EAAE,EAAE;QAC7F,MAAM,cAAc,GAAS,UAAW,CAAC,cAAc,CAAC;QACxD,IAAI,QAAQ,IAAI,cAAc,EAAE,CAAC;YAC7B,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QACxD,CAAC;IACL,CAAC;IACD,MAAM,EAAE,IAAI;CACf,CAAC;AACF,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE,CAAC;IACjC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxC,OAAO,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxD,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,mCAAmC,CAAC,GAAG,iCAAiC,CAAC;AACrG,CAAC;AACD,mDAAe,iCAAiC,EAAC","sources":["webpack:///./src/visual.ts","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/utils/FormattingSettingsUtils.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/index.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsComponents.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["\"use strict\";\n// --- estilos do visual (webpack trata .less) ---\nimport \"./style/visual.less\";\n\nimport powerbi from \"powerbi-visuals-api\";\nimport {\n    FormattingSettingsService,\n    formattingSettings\n} from \"powerbi-visuals-utils-formattingmodel\";\nimport { dataViewObjects } from \"powerbi-visuals-utils-dataviewutils\";\nimport IVisual = powerbi.extensibility.visual.IVisual;\nimport IVisualHost = powerbi.extensibility.visual.IVisualHost;\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\nimport ISelectionManager = powerbi.extensibility.ISelectionManager;\n\n/* ---------- SETTINGS CLASSES (NEW API) ---------- */\n\nclass SlicerSettingsCard extends formattingSettings.SimpleCard {\n    multiSelect = new formattingSettings.ToggleSwitch({\n        name: \"multiSelect\",\n        displayName: \"Multi-Select\",\n        value: true\n    });\n\n    singleSelect = new formattingSettings.ToggleSwitch({\n        name: \"singleSelect\",\n        displayName: \"Single-Select\",\n        value: false\n    });\n\n    name: string = \"slicerSettings\";\n    displayName: string = \"Slicer Settings\";\n    slices: formattingSettings.Slice[] = [this.multiSelect, this.singleSelect];\n}\n\nclass GridCard extends formattingSettings.SimpleCard {\n    flexDirection = new formattingSettings.ItemDropdown({\n        name: \"flexDirection\", displayName: \"Direction\",\n        items: [{ value: \"row\", displayName: \"Horizontal\" }, { value: \"column\", displayName: \"Vertical\" }],\n        value: { value: \"row\", displayName: \"Horizontal\" }\n    });\n    justifyContent = new formattingSettings.ItemDropdown({\n        name: \"justifyContent\", displayName: \"Justify Content\",\n        items: [ \n            { value: \"flex-start\", displayName: \"Start\" }, { value: \"center\", displayName: \"Center\" },\n            { value: \"flex-end\", displayName: \"End\" }, { value: \"space-between\", displayName: \"Space Between\" },\n            { value: \"space-around\", displayName: \"Space Around\" }\n        ],\n        value: { value: \"flex-start\", displayName: \"Start\" }\n    });\n    alignItems = new formattingSettings.ItemDropdown({\n        name: \"alignItems\", displayName: \"Align Items\",\n        items: [{ value: \"flex-start\", displayName: \"Start\" }, { value: \"center\", displayName: \"Center\" }, { value: \"flex-end\", displayName: \"End\" }, { value: \"stretch\", displayName: \"Stretch\" }],\n        value: { value: \"flex-start\", displayName: \"Start\" }\n    });\n    alignContent = new formattingSettings.ItemDropdown({\n        name: \"alignContent\", displayName: \"Align Content\",\n        items: [{ value: \"flex-start\", displayName: \"Start\" }, { value: \"center\", displayName: \"Center\" }, { value: \"flex-end\", displayName: \"End\" }, { value: \"space-between\", displayName: \"Space Between\" }, { value: \"space-around\", displayName: \"Space Around\" }, { value: \"stretch\", displayName: \"Stretch\" }],\n        value: { value: \"flex-start\", displayName: \"Start\" }\n    });\n    horizontalSpacing = new formattingSettings.NumUpDown({ name: \"horizontalSpacing\", displayName: \"Horizontal Spacing\", value: 5 });\n    verticalSpacing = new formattingSettings.NumUpDown({ name: \"verticalSpacing\", displayName: \"Vertical Spacing\", value: 5 });\n\n    name: string = \"grid\";\n    displayName: string = \"Grid Layout\";\n    slices: formattingSettings.Slice[] = [this.flexDirection, this.justifyContent, this.alignItems, this.alignContent, this.horizontalSpacing, this.verticalSpacing];\n}\n\nclass ContainerCard extends formattingSettings.SimpleCard {\n    backgroundColor = new formattingSettings.ColorPicker({ name: \"backgroundColor\", displayName: \"Background Color\", value: { value: \"#FFFFFF\" } });\n    borderColor = new formattingSettings.ColorPicker({ name: \"borderColor\", displayName: \"Border Color\", value: { value: \"#DDDDDD\" } });\n    borderWidth = new formattingSettings.NumUpDown({ name: \"borderWidth\", displayName: \"Border Width\", value: 1 });\n    borderRadius = new formattingSettings.NumUpDown({ name: \"borderRadius\", displayName: \"Border Radius\", value: 5 });\n    padding = new formattingSettings.NumUpDown({ name: \"padding\", displayName: \"Padding\", value: 10 });\n    shadow = new formattingSettings.TextInput({ name: \"shadow\", displayName: \"Shadow\", value: \"none\", placeholder: \"e.g., 2px 2px 5px #888888\" });\n    flexGrow = new formattingSettings.ToggleSwitch({ name: \"flexGrow\", displayName: \"Flex Grow\", value: false });\n\n    name: string = \"container\";\n    displayName: string = \"Container\";\n    slices: formattingSettings.Slice[] = [this.backgroundColor, this.borderColor, this.borderWidth, this.borderRadius, this.padding, this.shadow, this.flexGrow];\n}\n\nclass LabelCard extends formattingSettings.SimpleCard {\n    fontColor = new formattingSettings.ColorPicker({ name: \"fontColor\", displayName: \"Font Color\", value: { value: \"#333333\" } });\n    fontSize = new formattingSettings.NumUpDown({ name: \"fontSize\", displayName: \"Font Size\", value: 14 });\n    fontWeight = new formattingSettings.ItemDropdown({ name: \"fontWeight\", displayName: \"Font Weight\", items: [{ value: \"normal\", displayName: \"Normal\" }, { value: \"bold\", displayName: \"Bold\" }], value: { value: \"bold\", displayName: \"Bold\" } });\n    textAlign = new formattingSettings.ItemDropdown({ name: \"textAlign\", displayName: \"Text Align\", items: [{ value: \"left\", displayName: \"Left\" }, { value: \"center\", displayName: \"Center\" }, { value: \"right\", displayName: \"Right\" }], value: { value: \"left\", displayName: \"Left\" } });\n\n    name: string = \"label\";\n    displayName: string = \"Label\";\n    slices: formattingSettings.Slice[] = [this.fontColor, this.fontSize, this.fontWeight, this.textAlign];\n}\n\nclass SelectorCard extends formattingSettings.SimpleCard {\n    backgroundColor = new formattingSettings.ColorPicker({ name: \"backgroundColor\", displayName: \"Background Color\", value: { value: \"#FFFFFF\" } });\n    fontColor = new formattingSettings.ColorPicker({ name: \"fontColor\", displayName: \"Font Color\", value: { value: \"#333333\" } });\n    fontSize = new formattingSettings.NumUpDown({ name: \"fontSize\", displayName: \"Font Size\", value: 12 });\n    borderColor = new formattingSettings.ColorPicker({ name: \"borderColor\", displayName: \"Border Color\", value: { value: \"#CCCCCC\" } });\n    borderWidth = new formattingSettings.NumUpDown({ name: \"borderWidth\", displayName: \"Border Width\", value: 1 });\n    borderRadius = new formattingSettings.NumUpDown({ name: \"borderRadius\", displayName: \"Border Radius\", value: 4 });\n    height = new formattingSettings.NumUpDown({ name: \"height\", displayName: \"Height\", value: 40 });\n    arrowColor = new formattingSettings.ColorPicker({ name: \"arrowColor\", displayName: \"Arrow Color\", value: { value: \"#666666\" } });\n\n    name: string = \"selector\";\n    displayName: string = \"Selector\";\n    slices: formattingSettings.Slice[] = [this.backgroundColor, this.fontColor, this.fontSize, this.borderColor, this.borderWidth, this.borderRadius, this.height, this.arrowColor];\n}\n\nclass DropdownCard extends formattingSettings.SimpleCard {\n    itemBackgroundColor = new formattingSettings.ColorPicker({ name: \"itemBackgroundColor\", displayName: \"Item Background\", value: { value: \"#FFFFFF\" } });\n    itemFontColor = new formattingSettings.ColorPicker({ name: \"itemFontColor\", displayName: \"Item Font Color\", value: { value: \"#333333\" } });\n    itemHoverBackgroundColor = new formattingSettings.ColorPicker({ name: \"itemHoverBackgroundColor\", displayName: \"Hover Background\", value: { value: \"#e9ecef\" } });\n    itemHoverFontColor = new formattingSettings.ColorPicker({ name: \"itemHoverFontColor\", displayName: \"Hover Font Color\", value: { value: \"#0056b3\" } });\n    selectedItemBackgroundColor = new formattingSettings.ColorPicker({ name: \"selectedItemBackgroundColor\", displayName: \"Selected Background\", value: { value: \"#007bff\" } });\n    selectedItemFontColor = new formattingSettings.ColorPicker({ name: \"selectedItemFontColor\", displayName: \"Selected Font Color\", value: { value: \"#FFFFFF\" } });\n\n    name: string = \"dropdown\";\n    displayName: string = \"Dropdown Items\";\n    slices: formattingSettings.Slice[] = [\n        this.itemBackgroundColor, this.itemFontColor, \n        this.itemHoverBackgroundColor, this.itemHoverFontColor,\n        this.selectedItemBackgroundColor, this.selectedItemFontColor\n    ];\n}\n\nclass VisualFormattingSettings extends formattingSettings.Model {\n    slicerSettings = new SlicerSettingsCard();\n    grid = new GridCard();\n    container = new ContainerCard();\n    label = new LabelCard();\n    selector = new SelectorCard();\n    dropdown = new DropdownCard();\n\n    cards = [this.slicerSettings, this.grid, this.container, this.label, this.selector, this.dropdown];\n}\n\n/* ------------------------- VISUAL ------------------------------ */\n\nexport class Visual implements IVisual {\n  private host: IVisualHost;\n  private selectionManager: ISelectionManager;\n  private container: HTMLElement;\n  private activeSelectionKeys: Set<string> = new Set();\n\n  private formattingSettings: VisualFormattingSettings;\n  private formattingSettingsService: FormattingSettingsService;\n\n  constructor(options: VisualConstructorOptions) {\n    this.host = options.host;\n    this.selectionManager = this.host.createSelectionManager();\n    this.formattingSettingsService = new FormattingSettingsService();\n    this.container = document.createElement(\"div\");\n    this.container.className = \"grid-root\";\n    options.element.appendChild(this.container);\n  }\n\n  public getFormattingModel(): powerbi.visuals.FormattingModel {\n      return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);\n  }\n\n  public update(options: VisualUpdateOptions): void {\n    this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettings, options.dataViews[0]);\n\n    if (!options?.dataViews?.[0]) {\n      this.container.innerHTML = \"\";\n      return;\n    }\n\n    const dataView = options.dataViews[0];\n    this.activeSelectionKeys = new Set(\n      (this.selectionManager.getSelectionIds() as any[]).map(id => JSON.stringify(id.getKey()) + JSON.stringify(id.getSelector()))\n    );\n\n\n\n    const cat = dataView.categorical?.categories;\n    if (cat) this.renderDropdown(cat, dataView);\n  }\n\n  private renderDropdown(categories: powerbi.DataViewCategoryColumn[], dataView: powerbi.DataView): void {\n    const existingSlicers = new Set<string>();\n    this.container.querySelectorAll('[data-slicer-name]').forEach((node: HTMLElement) => {\n        existingSlicers.add(node.getAttribute('data-slicer-name'));\n    });\n\n    const currentSlicers = new Set<string>();\n    \n    // Sort categories alphabetically by display name\n    const sortedCategories = [...categories].sort((a, b) => \n        a.source.displayName.localeCompare(b.source.displayName)\n    );\n\n    sortedCategories.forEach(category => {\n        const slicerName = category.source.displayName;\n        currentSlicers.add(slicerName);\n\n        let slicerContainer = this.container.querySelector(`[data-slicer-name=\"${slicerName}\"]`) as HTMLElement;\n        if (!slicerContainer) {\n            slicerContainer = this.createSlicerContainer(slicerName);\n            this.container.appendChild(slicerContainer);\n        } else {\n            // Update existing container styles if needed\n            this.applyContainerStyles(slicerContainer);\n        }\n\n        this.createDropdownLayout(slicerContainer, category, dataView);\n        this.applyLabelStyles(slicerContainer.querySelector('.slicer-header'));\n        this.applySelectorStyles(slicerContainer.querySelector('.custom-dropdown'));\n    });\n\n    // Remove old slicers\n    existingSlicers.forEach(slicerName => {\n        if (!currentSlicers.has(slicerName)) {\n            const oldSlicer = this.container.querySelector(`[data-slicer-name=\"${slicerName}\"]`);\n            if (oldSlicer) {\n                this.container.removeChild(oldSlicer);\n            }\n        }\n    });\n\n    this.applyGridStyles();\n  }\n\n  private applyGridStyles() {\n    const g = this.formattingSettings.grid;\n    this.container.style.flexDirection = g.flexDirection.value.value as string;\n    this.container.style.justifyContent = g.justifyContent.value.value as string;\n    this.container.style.alignItems = g.alignItems.value.value as string;\n    this.container.style.alignContent = g.alignContent.value.value as string;\n    this.container.style.gap = `${g.verticalSpacing.value}px ${g.horizontalSpacing.value}px`;\n  }\n\n  private createSlicerContainer(slicerName: string): HTMLElement {\n      const slicerContainer = document.createElement(\"div\");\n      slicerContainer.className = \"slicer-container\";\n      slicerContainer.setAttribute(\"data-slicer-name\", slicerName);\n      this.applyContainerStyles(slicerContainer);\n      return slicerContainer;\n  }\n\n  private applyContainerStyles(element: HTMLElement) {\n      if (!element) return;\n      const c = this.formattingSettings.container;\n      element.style.backgroundColor = c.backgroundColor.value.value;\n      element.style.border = `${c.borderWidth.value}px solid ${c.borderColor.value.value}`;\n      element.style.borderRadius = `${c.borderRadius.value}px`;\n      element.style.boxShadow = c.shadow.value;\n      element.style.padding = `${c.padding.value}px`;\n      element.style.flexGrow = c.flexGrow.value ? '1' : '0';\n  }\n\n  private applyLabelStyles(element: HTMLElement) {\n    if (!element) return;\n    const l = this.formattingSettings.label;\n    element.style.color = l.fontColor.value.value;\n    element.style.fontSize = `${l.fontSize.value}px`;\n    element.style.fontWeight = l.fontWeight.value.value as string;\n    element.style.textAlign = l.textAlign.value.value as string;\n  }\n\n  private applySelectorStyles(element: HTMLElement) {\n    if (!element) return;\n    const s = this.formattingSettings.selector;\n    const header = element.querySelector('.dropdown-header') as HTMLElement;\n    if (header) {\n        header.style.backgroundColor = s.backgroundColor.value.value;\n        header.style.border = `${s.borderWidth.value}px solid ${s.borderColor.value.value}`;\n        header.style.borderRadius = `${s.borderRadius.value}px`;\n        header.style.height = `${s.height.value}px`;\n    }\n    const text = element.querySelector('.header-text') as HTMLElement;\n    if (text) {\n        text.style.color = s.fontColor.value.value;\n        text.style.fontSize = `${s.fontSize.value}px`;\n    }\n    const arrow = element.querySelector('.arrow-down') as HTMLElement;\n    if (arrow) {\n        arrow.style.borderTopColor = s.arrowColor.value.value;\n    }\n  }\n\n  private applyDropdownStyles(element: HTMLElement) {\n    if (!element) return;\n    const d = this.formattingSettings.dropdown;\n    element.style.setProperty('--item-bg-color', d.itemBackgroundColor.value.value);\n    element.style.setProperty('--item-font-color', d.itemFontColor.value.value);\n    element.style.setProperty('--item-hover-bg-color', d.itemHoverBackgroundColor.value.value);\n    element.style.setProperty('--item-hover-font-color', d.itemHoverFontColor.value.value);\n    element.style.setProperty('--selected-bg-color', d.selectedItemBackgroundColor.value.value);\n    element.style.setProperty('--selected-font-color', d.selectedItemFontColor.value.value);\n  }\n\n  private createDropdownLayout(container: HTMLElement, category: powerbi.DataViewCategoryColumn, dataView: powerbi.DataView) {\n    // Clear existing event listeners\n    const oldDropdownContainer = container.querySelector(\".custom-dropdown\") as HTMLElement;\n    if (oldDropdownContainer) {\n        const oldHeader = oldDropdownContainer.querySelector(\".dropdown-header\") as HTMLElement;\n        const oldList = oldDropdownContainer.querySelector(\".dropdown-list-container\") as HTMLElement;\n        if (oldHeader) {\n            const newHeader = oldHeader.cloneNode(true);\n            oldHeader.parentNode.replaceChild(newHeader, oldHeader);\n        }\n        if (oldList) {\n            oldList.classList.remove('open');\n        }\n    }\n\n    let label = container.querySelector(\".slicer-header\") as HTMLElement;\n    if (!label) {\n        label = document.createElement(\"div\");\n        label.className = \"slicer-header\";\n        container.appendChild(label);\n    }\n    label.textContent = category.source.displayName;\n\n    let dropdownContainer = container.querySelector(\".custom-dropdown\") as HTMLElement;\n    if (!dropdownContainer) {\n        dropdownContainer = document.createElement(\"div\");\n        dropdownContainer.className = \"custom-dropdown\";\n        container.appendChild(dropdownContainer);\n    }\n\n    let dropdownHeader = dropdownContainer.querySelector(\".dropdown-header\") as HTMLElement;\n    if (!dropdownHeader) {\n        dropdownHeader = document.createElement(\"div\");\n        dropdownHeader.className = \"dropdown-header\";\n        dropdownContainer.appendChild(dropdownHeader);\n    }\n\n    let headerText = dropdownHeader.querySelector(\".header-text\") as HTMLElement;\n    if (!headerText) {\n        headerText = document.createElement(\"span\");\n        headerText.className = \"header-text\";\n        dropdownHeader.appendChild(headerText);\n    }\n\n    let arrow = dropdownHeader.querySelector(\".arrow-down\") as HTMLElement;\n    if (!arrow) {\n        arrow = document.createElement(\"div\");\n        arrow.className = \"arrow-down\";\n        dropdownHeader.appendChild(arrow);\n    }\n\n    let dropdownListContainer = dropdownContainer.querySelector(\".dropdown-list-container\") as HTMLElement;\n    if (!dropdownListContainer) {\n        dropdownListContainer = document.createElement(\"div\");\n        dropdownListContainer.className = \"dropdown-list-container\";\n        dropdownContainer.appendChild(dropdownListContainer);\n    }\n\n    // Ensure dropdown is closed initially\n    dropdownListContainer.classList.remove('open');\n\n    // Toggle dropdown visibility\n    dropdownHeader.onclick = (event) => {\n        event.stopPropagation();\n        const isOpen = dropdownListContainer.classList.toggle('open');\n        if (isOpen) {\n            document.addEventListener('click', closeDropdownOnOutsideClick, true);\n        } else {\n            document.removeEventListener('click', closeDropdownOnOutsideClick, true);\n        }\n    };\n\n    const closeDropdownOnOutsideClick = (event: MouseEvent) => {\n        if (!dropdownContainer.contains(event.target as Node)) {\n            dropdownListContainer.classList.remove('open');\n            document.removeEventListener('click', closeDropdownOnOutsideClick, true);\n        }\n    };\n\n    this.updateHeaderText(headerText, category, dataView);\n    this.populateDropdownOptions(dropdownListContainer, category, dataView, headerText);\n\n    // Apply styles after elements are created or updated\n    this.applyLabelStyles(label);\n    this.applySelectorStyles(dropdownContainer);\n    this.applyDropdownStyles(dropdownListContainer);\n  }\n\n  private populateDropdownOptions(content: HTMLElement, category: powerbi.DataViewCategoryColumn, dataView: powerbi.DataView, headerText: HTMLElement) {\n    content.innerHTML = ''; // Clear existing options\n\n    const searchInput = document.createElement(\"input\");\n    searchInput.type = \"text\";\n    searchInput.placeholder = \"Buscar opções...\";\n    searchInput.className = \"search-input\";\n    searchInput.onkeyup = () => {\n        const filter = searchInput.value.toUpperCase();\n        const options = content.querySelectorAll(\".dropdown-option\");\n        options.forEach(option => {\n            const txtValue = option.textContent || \"\";\n            (option as HTMLElement).style.display = txtValue.toUpperCase().indexOf(filter) > -1 ? \"\" : \"none\";\n        });\n    };\n    content.appendChild(searchInput);\n\n    // 'All' Option\n    this.createOption(content, \"All\", 0, category, dataView, headerText, true);\n\n    // Data Options\n    category.values.forEach((value, index) => {\n        const displayValue = (value !== null && value !== undefined && value !== '') ? String(value) : `Item ${index + 1}`;\n        this.createOption(content, displayValue, index, category, dataView, headerText, false);\n    });\n  }\n\n  private createOption(container: HTMLElement, name: string, index: number, category: powerbi.DataViewCategoryColumn, dataView: powerbi.DataView, headerText: HTMLElement, isAllOption: boolean) {\n      const option = document.createElement(\"div\");\n      option.className = \"dropdown-option\";\n      option.textContent = name;\n\n      const selectionId = this.host.createSelectionIdBuilder()\n          .withCategory(category, isAllOption ? null : index)\n          .createSelectionId();\n\n      // Check if this option should be marked as selected\n      if (isAllOption) {\n          // 'All' is selected when no selections exist or all items are selected\n          const selections = this.selectionManager.getSelectionIds();\n          if (selections.length === 0 || selections.length === category.values.length) {\n              option.classList.add(\"selected\");\n          }\n      } else {\n          const key = JSON.stringify((selectionId as any).getKey()) + JSON.stringify((selectionId as any).getSelector());\n          if (this.activeSelectionKeys.has(key)) {\n              option.classList.add(\"selected\");\n          }\n      }\n\n      option.onclick = (event) => {\n\n          if (isAllOption) {\n              // Clear all selections when 'All' is clicked\n              this.selectionManager.clear();\n              this.activeSelectionKeys.clear();\n\n          } else {\n              const multiSelect = this.formattingSettings.slicerSettings.multiSelect.value;\n\n              this.selectionManager.select(selectionId, multiSelect);\n\n          }\n          this.updateAndClose(headerText, category, dataView, container.parentElement);\n          container.parentElement.classList.remove('open'); // Explicitly close dropdown\n      };\n      container.appendChild(option);\n  }\n\n  private updateAndClose(headerText: HTMLElement, category: powerbi.DataViewCategoryColumn, dataView: powerbi.DataView, dropdownListContainer: HTMLElement) {\n      // Update activeSelectionKeys to match current selections\n      const selections = this.selectionManager.getSelectionIds();\n      this.activeSelectionKeys.clear();\n      selections.forEach(selection => {\n          this.activeSelectionKeys.add(JSON.stringify((selection as any).getKey()) + JSON.stringify((selection as any).getSelector()));\n      });\n      \n      this.updateHeaderText(headerText, category, dataView);\n            \n      if (dropdownListContainer) {\n        dropdownListContainer.classList.remove('open');\n      }\n  }\n\n  private updateHeaderText(headerText: HTMLElement, category: powerbi.DataViewCategoryColumn, dataView: powerbi.DataView) {\n    const selections = this.selectionManager.getSelectionIds();\n    const selectedIdKeys = new Set((selections as any[]).map(id => JSON.stringify(id.getKey()) + JSON.stringify(id.getSelector())));\n    const selectedValues: powerbi.PrimitiveValue[] = [];\n    category.values.forEach((value, index) => {\n        const selectionId = this.host.createSelectionIdBuilder()\n            .withCategory(category, index)\n            .createSelectionId();\n        const key = JSON.stringify((selectionId as any).getKey()) + JSON.stringify((selectionId as any).getSelector());\n        if (selectedIdKeys.has(key)) {\n            selectedValues.push(value);\n        }\n    });\n\n\n\n    if (selectedValues.length === 0) {\n        // Show \"Todos\" when no selection is made\n\n        headerText.textContent = \"Todos\";\n    } else if (selectedValues.length === 1) {\n        const selectedValue = selectedValues[0];\n        const displayText = (selectedValue !== null && selectedValue !== undefined && selectedValue !== '') ? String(selectedValue) : \"Todos\";\n\n        headerText.textContent = displayText;\n    } else if (selectedValues.length === category.values.length) {\n\n        headerText.textContent = \"Todos\";\n    } else {\n\n        headerText.textContent = `${selectedValues.length} selecionados`;\n    }\n  }\n\n\n  public destroy(): void { /* cleanup */ }\n}","/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nexport function getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nexport function getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if ((slice === null || slice === void 0 ? void 0 : slice.type) === \"Dropdown\" /* visuals.FormattingComponent.Dropdown */ && slice.items) {\n        const itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\nexport function getLocalizedProperty(item, property, localizationManager) {\n    var _a;\n    return (localizationManager && item[property.toString() + \"Key\"]) ? localizationManager.getDisplayName(item[property.toString() + \"Key\"]) : (_a = item[property]) === null || _a === void 0 ? void 0 : _a.toString();\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map","import { CompositeCard, SimpleCard } from \"./FormattingSettingsComponents\";\nimport { getLocalizedProperty } from \"./utils/FormattingSettingsUtils\";\nexport class FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataView) {\n        var _a, _b;\n        const defaultSettings = new typeClass();\n        const dataViewObjects = (_a = dataView === null || dataView === void 0 ? void 0 : dataView.metadata) === null || _a === void 0 ? void 0 : _a.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_b = defaultSettings.cards) === null || _b === void 0 ? void 0 : _b.forEach((card) => {\n                var _a;\n                if (card instanceof CompositeCard)\n                    (_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                const cardGroupInstances = (card instanceof SimpleCard ? [card] : card.groups);\n                cardGroupInstances === null || cardGroupInstances === void 0 ? void 0 : cardGroupInstances.forEach((cardGroupInstance) => {\n                    var _a, _b, _c, _d;\n                    // Set current top level toggle value\n                    (_a = cardGroupInstance.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                    (_b = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.slices) === null || _b === void 0 ? void 0 : _b.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                    (_d = (_c = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.container) === null || _c === void 0 ? void 0 : _c.containerItems) === null || _d === void 0 ? void 0 : _d.forEach((containerItem) => {\n                        var _a, _b;\n                        (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                            slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                        });\n                        (_b = containerItem === null || containerItem === void 0 ? void 0 : containerItem.groups) === null || _b === void 0 ? void 0 : _b.forEach((group) => {\n                            var _a, _b;\n                            (_a = group === null || group === void 0 ? void 0 : group.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                            (_b = group === null || group === void 0 ? void 0 : group.slices) === null || _b === void 0 ? void 0 : _b.forEach((slice) => {\n                                slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                            });\n                        });\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        const formattingModel = {\n            cards: []\n        };\n        formattingSettingsModel.cards\n            .filter(({ visible = true }) => visible)\n            .forEach((card) => {\n            var _a;\n            const formattingCard = {\n                displayName: getLocalizedProperty(card, \"displayName\", this.localizationManager),\n                description: getLocalizedProperty(card, \"description\", this.localizationManager),\n                disabled: card.disabled,\n                disabledReason: getLocalizedProperty(card, \"disabledReason\", this.localizationManager),\n                groups: [],\n                uid: card.name + \"-card\",\n                analyticsPane: card.analyticsPane,\n            };\n            const objectName = card.name;\n            this.setTopLevelToggleSliceClone(card, formattingCard, objectName);\n            (_a = card.onPreProcess) === null || _a === void 0 ? void 0 : _a.call(card);\n            const isSimpleCard = card instanceof SimpleCard;\n            const cardGroupInstances = (isSimpleCard ?\n                [card].filter(({ visible = true }) => visible) :\n                card.groups.filter(({ visible = true }) => visible));\n            cardGroupInstances === null || cardGroupInstances === void 0 ? void 0 : cardGroupInstances.forEach((cardGroupInstance) => {\n                const formattingGroup = this.buildCardGroupInstances(cardGroupInstance, formattingCard, isSimpleCard, objectName);\n                formattingCard.groups.push(formattingGroup);\n            });\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n            formattingModel.cards.push(formattingCard);\n        });\n        return formattingModel;\n    }\n    buildCardGroupInstances(cardGroupInstance, formattingCard, isSimpleCard, objectName) {\n        const groupUid = cardGroupInstance.name + \"-group\";\n        // Build formatting group for each group\n        const formattingGroup = {\n            displayName: isSimpleCard ? undefined : getLocalizedProperty(cardGroupInstance, \"displayName\", this.localizationManager),\n            description: isSimpleCard ? undefined : getLocalizedProperty(cardGroupInstance, \"description\", this.localizationManager),\n            slices: [],\n            uid: groupUid,\n            collapsible: cardGroupInstance.collapsible,\n            delaySaveSlices: cardGroupInstance.delaySaveSlices,\n            disabled: cardGroupInstance.disabled,\n            disabledReason: getLocalizedProperty(cardGroupInstance, \"disabledReason\", this.localizationManager),\n        };\n        // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n        // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n        // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n        const sliceNames = {};\n        // Build formatting container slice for each property\n        if (cardGroupInstance.container) {\n            const containerUid = formattingGroup.uid + \"-container\";\n            const formattingContainer = this.buildContainerGroupInstance(cardGroupInstance.container, containerUid, objectName, sliceNames);\n            formattingGroup.displayName = \"Apply settings to\";\n            formattingGroup.sliceWithContainer = false;\n            formattingGroup.collapsible = false;\n            formattingGroup.container = formattingContainer;\n        }\n        if (cardGroupInstance.slices) {\n            this.setTopLevelToggleSliceClone(cardGroupInstance, (formattingGroup.displayName == undefined ? formattingCard : formattingGroup), objectName);\n            // Build formatting slice for each property\n            this.buildFormattingSlices({ slices: cardGroupInstance.slices, objectName, sliceNames, formattingSlices: formattingGroup.slices });\n        }\n        return formattingGroup;\n    }\n    buildContainerGroupInstance(container, containerUid, objectName, sliceNames) {\n        const formattingContainer = {\n            displayName: getLocalizedProperty(container, \"displayName\", this.localizationManager),\n            description: getLocalizedProperty(container, \"description\", this.localizationManager),\n            containerItems: [],\n            uid: containerUid\n        };\n        container.containerItems.filter(({ visible = true }) => visible).forEach((containerItem) => {\n            if (!containerItem) { // This is to prevent error when container item is null or undefined\n                return;\n            }\n            // Build formatting container item object\n            const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n            const containerItemUid = containerUid + containerIemName;\n            const formattingContainerItem = {\n                displayName: getLocalizedProperty(containerItem, \"displayName\", this.localizationManager),\n                slices: [],\n                groups: [],\n                uid: containerItemUid\n            };\n            // Build formatting slices and add them to current formatting container item\n            if (containerItem.slices) {\n                this.buildFormattingSlices({ slices: containerItem.slices, objectName, sliceNames, formattingSlices: formattingContainerItem.slices });\n            }\n            // Build formatting groups and add them to current formatting container item\n            if (containerItem.groups) {\n                containerItem.groups.forEach((group) => {\n                    const groupSlices = {\n                        displayName: getLocalizedProperty(group, \"displayName\", this.localizationManager),\n                        description: getLocalizedProperty(group, \"description\", this.localizationManager),\n                        slices: [],\n                        uid: group.name + \"-container-group\",\n                        collapsible: group.collapsible,\n                        delaySaveSlices: group.delaySaveSlices,\n                        disabled: group.disabled,\n                        disabledReason: getLocalizedProperty(group, \"disabledReason\", this.localizationManager)\n                    };\n                    this.setTopLevelToggleSliceClone(group, groupSlices, objectName);\n                    this.buildFormattingSlices({ slices: group.slices, objectName, sliceNames, formattingSlices: groupSlices.slices });\n                    formattingContainerItem.groups.push(groupSlices);\n                });\n            }\n            formattingContainer.containerItems.push(formattingContainerItem); // pushes specific container item (All, name1, name2) with slices\n        });\n        return formattingContainer;\n    }\n    buildFormattingSlices({ slices, objectName, sliceNames, formattingSlices }) {\n        // Filter slices based on their visibility\n        slices === null || slices === void 0 ? void 0 : slices.filter(({ visible = true }) => visible).forEach((slice) => {\n            const formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                formattingSlices.push(formattingSlice);\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        const revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors;\n        let cardContainerSlicesDefaultDescriptors = [];\n        // eslint-disable-next-line\n        if (card instanceof CompositeCard && card.topLevelSlice)\n            revertToDefaultDescriptors.push(...(_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.getRevertToDefaultDescriptor(card.name));\n        const cardGroupInstances = (card instanceof SimpleCard ?\n            [card].filter(({ visible = true }) => visible) :\n            card.groups.filter(({ visible = true }) => visible));\n        cardGroupInstances === null || cardGroupInstances === void 0 ? void 0 : cardGroupInstances.forEach((cardGroupInstance) => {\n            var _a, _b;\n            cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, cardGroupInstance.slices, sliceNames, cardGroupInstance.topLevelSlice);\n            (_b = (_a = cardGroupInstance.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n                var _a;\n                cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n                (_a = containerItem.groups) === null || _a === void 0 ? void 0 : _a.forEach((group) => {\n                    cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, group.slices, sliceNames));\n                });\n            });\n            revertToDefaultDescriptors.push(...cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors));\n        });\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames, topLevelSlice) {\n        let revertToDefaultDescriptors = [];\n        if (topLevelSlice) {\n            sliceNames[topLevelSlice.name] = true;\n            revertToDefaultDescriptors = revertToDefaultDescriptors.concat(topLevelSlice.getRevertToDefaultDescriptor(cardName));\n        }\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n    setTopLevelToggleSliceClone(objectToClone, newParent, objectName) {\n        if (objectToClone.topLevelSlice) {\n            const topLevelToggleSlice = objectToClone.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n            topLevelToggleSlice.suppressDisplayName = true;\n            newParent.topLevelToggle = topLevelToggleSlice;\n        }\n    }\n}\nexport default FormattingSettingsService;\n//# sourceMappingURL=FormattingSettingsService.js.map","import * as formattingSettings from \"./FormattingSettingsComponents\";\nimport FormattingSettingsService from \"./FormattingSettingsService\";\nimport * as formattingSettingsInterfaces from \"./FormattingSettingsInterfaces\";\nexport { formattingSettings, FormattingSettingsService, formattingSettingsInterfaces };\n//# sourceMappingURL=index.js.map","/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\nimport * as FormattingSettingsParser from \"./utils/FormattingSettingsUtils\";\nimport { getLocalizedProperty } from \"./utils/FormattingSettingsUtils\";\nexport class NamedEntity {\n}\nexport class CardGroupEntity extends NamedEntity {\n}\nexport class Model {\n}\n/** CompositeCard is use to populate a card into the formatting pane with multiple groups */\nexport class CompositeCard extends NamedEntity {\n}\nexport class Group extends CardGroupEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object !== null && object !== void 0 ? object : new Object({}));\n    }\n}\n/** SimpleCard is use to populate a card into the formatting pane in a single group */\nexport class SimpleCard extends CardGroupEntity {\n}\nexport class SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = getLocalizedProperty(this, \"displayName\", localizationManager);\n        const sliceDescription = getLocalizedProperty(this, \"description\", localizationManager);\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            }, disabled: this.disabled, disabledReason: getLocalizedProperty(this, \"disabledReason\", localizationManager) });\n    }\n    // eslint-disable-next-line\n    getFormattingComponent(objectName, localizationManager) {\n        let value = this.value;\n        if (value === null || value === void 0 ? void 0 : value.displayNameKey) {\n            value = {\n                displayName: localizationManager === null || localizationManager === void 0 ? void 0 : localizationManager.getDisplayName(value.displayNameKey),\n                value: value.value\n            };\n        }\n        return {\n            descriptor: FormattingSettingsParser.getDescriptor(objectName, this),\n            value: value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        const newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = FormattingSettingsParser.getPropertyValue(this, newValue, this.value);\n    }\n}\nexport class AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nexport class ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nexport class ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nexport class NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nexport class Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nexport class DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: getLocalizedProperty(this, \"placeholder\", localizationManager), validators: this.validators });\n    }\n}\nexport class ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName, localizationManager)), { items: this.getFormattingItems(localizationManager, this.items) });\n    }\n    getFormattingItems(localizationManager, items) {\n        return items.map((item) => {\n            return Object.assign(Object.assign({}, item), { displayName: getLocalizedProperty(item, \"displayName\", localizationManager) });\n        });\n    }\n    setValue(value, localizationManager) {\n        const newValue = this.getFormattingItems(localizationManager, this.items).find((item) => item.value === value);\n        this.value = newValue ? newValue : this.items[0];\n    }\n}\nexport class AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName, localizationManager)), { mergeValues: this.getFormattingItems(localizationManager, this.mergeValues), filterValues: this.filterValues });\n    }\n    getFormattingItems(localizationManager, items) {\n        return items === null || items === void 0 ? void 0 : items.map((item) => {\n            return Object.assign(Object.assign({}, item), { displayName: getLocalizedProperty(item, \"displayName\", localizationManager) });\n        });\n    }\n}\nexport class DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\n/**\n * Allows selecting multiple flags from a predefined list of items with bitwise values.\n * The selected flags are stored as a single number using bitwise representation,\n * where each flag corresponds to a specific bit position.\n * @example\n * 0 = no flags\n * 1 = show category\n * 2 = show value\n * 4 = show percent\n */\nexport class ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.getFormattingItems(localizationManager, this.items) });\n    }\n    getFormattingItems(localizationManager, items) {\n        return items.map((item) => {\n            return Object.assign(Object.assign({}, item), { displayName: getLocalizedProperty(item, \"displayName\", localizationManager) });\n        });\n    }\n}\n/**\n * Multiple flags selection component with enumeration values defined in capabilities.json,\n * using bitwise number values in a string representation.\n * The selected flags are stored as a single number using bitwise representation,\n * where each flag corresponds to a specific bit position.\n * @example\n * 0 = no flags\n * 1 = show category\n * 2 = show value\n * 4 = show percent\n */\nexport class AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nexport class TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nexport class TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nexport class FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nexport class GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nexport class ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nexport class ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nexport class ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nexport class ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nexport class CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: getLocalizedProperty(this, \"displayName\", localizationManager),\n            description: getLocalizedProperty(this, \"description\", localizationManager),\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nexport class FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class Container extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\nexport class ContainerItem extends NamedEntity {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar GridSlicer_guid_placeholder_DEBUG: IVisualPlugin = {\n    name: 'GridSlicer_guid_placeholder_DEBUG',\n    displayName: 'Grid Slicer',\n    class: 'Visual',\n    apiVersion: '5.7.0',\n    create: (options?: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = (<any>globalThis).dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"GridSlicer_guid_placeholder_DEBUG\"] = GridSlicer_guid_placeholder_DEBUG;\n}\nexport default GridSlicer_guid_placeholder_DEBUG;"],"names":[],"sourceRoot":""}