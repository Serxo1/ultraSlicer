{"version":3,"file":"visual.js","mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mD;;;;;;;;;;;ACrCO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,GAAG,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;AACzC,qD;;;;;;;;;;;;;AC9IqE;AACD;AACX;AACzD,iC;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AAC4E;AAC5E;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,wBAAwB,kFAAsC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,qFAAyC;AAC9D;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,oFAAoF;AAChL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,uBAAuB;AACnH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,qKAAqK;AACjQ;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,4EAA4E;AACxK;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,+BAA+B;AAC3H;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;A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","sources":["webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/utils/FormattingSettingsUtils.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/index.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsComponents.js","webpack:///./src/visual.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nexport function getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nexport function getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if (slice === null || slice === void 0 ? void 0 : slice.items) {\n        let itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map","export class FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataViews) {\n        var _a, _b, _c;\n        let defaultSettings = new typeClass();\n        let dataViewObjects = (_b = (_a = dataViews === null || dataViews === void 0 ? void 0 : dataViews[0]) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_c = defaultSettings.cards) === null || _c === void 0 ? void 0 : _c.forEach((card) => {\n                var _a, _b, _c;\n                (_a = card === null || card === void 0 ? void 0 : card.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                    slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                });\n                (_c = (_b = card === null || card === void 0 ? void 0 : card.container) === null || _b === void 0 ? void 0 : _b.containerItems) === null || _c === void 0 ? void 0 : _c.forEach((containerItem) => {\n                    var _a;\n                    (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        var _a;\n        let formattingModel = {\n            cards: []\n        };\n        (_a = formattingSettingsModel.cards) === null || _a === void 0 ? void 0 : _a.forEach((card) => {\n            if (!card)\n                return;\n            const objectName = card.name;\n            const groupUid = card.name + \"-group\";\n            let formattingGroup = {\n                displayName: undefined,\n                slices: [],\n                uid: groupUid\n            };\n            let formattingCard = card.getFormattingCard(objectName, formattingGroup, this.localizationManager);\n            formattingModel.cards.push(formattingCard);\n            // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n            // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n            // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n            const sliceNames = {};\n            // Build formatting container slice for each property\n            if (card.container) {\n                const container = card.container;\n                const containerUid = groupUid + \"-container\";\n                const formattingContainer = {\n                    displayName: (this.localizationManager && container.displayNameKey)\n                        ? this.localizationManager.getDisplayName(container.displayNameKey) : container.displayName,\n                    description: (this.localizationManager && container.descriptionKey)\n                        ? this.localizationManager.getDisplayName(container.descriptionKey) : container.description,\n                    containerItems: [],\n                    uid: containerUid\n                };\n                container.containerItems.forEach((containerItem) => {\n                    // Build formatting container item object\n                    const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n                    const containerItemUid = containerUid + containerIemName;\n                    let formattingContainerItem = {\n                        displayName: (this.localizationManager && containerItem.displayNameKey)\n                            ? this.localizationManager.getDisplayName(containerItem.displayNameKey) : containerItem.displayName,\n                        slices: [],\n                        uid: containerItemUid\n                    };\n                    // Build formatting slices and add them to current formatting container item\n                    this.buildFormattingSlices(containerItem.slices, objectName, sliceNames, formattingCard, formattingContainerItem.slices);\n                    formattingContainer.containerItems.push(formattingContainerItem);\n                });\n                formattingGroup.container = formattingContainer;\n            }\n            if (card.slices) {\n                // Build formatting slice for each property\n                this.buildFormattingSlices(card.slices, objectName, sliceNames, formattingCard, formattingGroup.slices);\n            }\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n        });\n        return formattingModel;\n    }\n    buildFormattingSlices(slices, objectName, sliceNames, formattingCard, formattingSlices) {\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            let formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                // Set as topLevelToggle if topLevelToggle boolean was set to true\n                if (slice.topLevelToggle) {\n                    formattingSlice.suppressDisplayName = true;\n                    formattingCard.topLevelToggle = formattingSlice;\n                }\n                else {\n                    formattingSlices.push(formattingSlice);\n                }\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a, _b;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        let revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, card.slices, sliceNames);\n        let cardContainerSlicesDefaultDescriptors = [];\n        (_b = (_a = card.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n            cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n        });\n        revertToDefaultDescriptors = cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors);\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames) {\n        let revertToDefaultDescriptors = [];\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n}\nexport default FormattingSettingsService;\n//# sourceMappingURL=FormattingSettingsService.js.map","import * as formattingSettings from \"./FormattingSettingsComponents\";\nimport FormattingSettingsService from \"./FormattingSettingsService\";\nexport { formattingSettings, FormattingSettingsService };\n//# sourceMappingURL=index.js.map","/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\nimport * as FormattingSettingsParser from \"./utils/FormattingSettingsUtils\";\nclass NamedEntity {\n}\nexport class Model {\n}\nexport class Card extends NamedEntity {\n    getFormattingCard(objectName, group, localizationManager) {\n        return {\n            displayName: (localizationManager && this.displayNameKey)\n                ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey)\n                ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            groups: [group],\n            uid: objectName,\n            analyticsPane: this.analyticsPane\n        };\n    }\n}\nexport class SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName;\n        const sliceDescription = (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description;\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            } });\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return {\n            descriptor: FormattingSettingsParser.getDescriptor(objectName, this),\n            value: this.value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        let newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = FormattingSettingsParser.getPropertyValue(this, newValue, this.value);\n    }\n}\nexport class AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nexport class ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nexport class ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nexport class NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nexport class Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nexport class DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: (localizationManager && this.placeholderKey) ? localizationManager.getDisplayName(this.placeholderKey) : this.placeholder, validators: this.validators });\n    }\n}\nexport class ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mergeValues: this.mergeValues, filterValues: this.filterValues });\n    }\n}\nexport class DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\nexport class ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nexport class TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nexport class TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nexport class FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nexport class GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nexport class ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nexport class ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nexport class ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nexport class ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nexport class CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nexport class FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class Container extends NamedEntity {\n}\nexport class ContainerItem extends NamedEntity {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map","\"use strict\";\r\n// --- estilos do visual (webpack trata .less) ---\r\nimport \"./style/visual.less\";\r\n\r\nimport powerbi from \"powerbi-visuals-api\";\r\nimport {\r\n    FormattingSettingsService,\r\n    formattingSettings\r\n} from \"powerbi-visuals-utils-formattingmodel\";\r\nimport { dataViewObjects } from \"powerbi-visuals-utils-dataviewutils\";\r\nimport IVisual = powerbi.extensibility.visual.IVisual;\r\nimport IVisualHost = powerbi.extensibility.visual.IVisualHost;\r\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\r\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\r\nimport ISelectionManager = powerbi.extensibility.ISelectionManager;\r\n\r\n\r\n/* ---------- SETTINGS CLASSES (NEW API) ---------- */\r\n\r\nclass SlicerSettingsCard extends formattingSettings.Card {\r\n    multiSelect = new formattingSettings.ToggleSwitch({\r\n        name: \"multiSelect\",\r\n        displayName: \"Multi-Select\",\r\n        value: true\r\n    });\r\n\r\n    singleSelect = new formattingSettings.ToggleSwitch({\r\n        name: \"singleSelect\",\r\n        displayName: \"Single-Select\",\r\n        value: false\r\n    });\r\n\r\n    name: string = \"slicerSettings\";\r\n    displayName: string = \"Slicer Settings\";\r\n    slices: formattingSettings.Slice[] = [this.multiSelect, this.singleSelect];\r\n}\r\n\r\nclass GridCard extends formattingSettings.Card {\r\n    flexDirection = new formattingSettings.ItemDropdown({\r\n        name: \"flexDirection\", displayName: \"Direction\",\r\n        items: [{ value: \"row\", displayName: \"Horizontal\" }, { value: \"column\", displayName: \"Vertical\" }],\r\n        value: { value: \"row\", displayName: \"Horizontal\" }\r\n    });\r\n    justifyContent = new formattingSettings.ItemDropdown({\r\n        name: \"justifyContent\", displayName: \"Justify Content\",\r\n        items: [ \r\n            { value: \"flex-start\", displayName: \"Start\" }, { value: \"center\", displayName: \"Center\" },\r\n            { value: \"flex-end\", displayName: \"End\" }, { value: \"space-between\", displayName: \"Space Between\" },\r\n            { value: \"space-around\", displayName: \"Space Around\" }\r\n        ],\r\n        value: { value: \"flex-start\", displayName: \"Start\" }\r\n    });\r\n    alignItems = new formattingSettings.ItemDropdown({\r\n        name: \"alignItems\", displayName: \"Align Items\",\r\n        items: [{ value: \"flex-start\", displayName: \"Start\" }, { value: \"center\", displayName: \"Center\" }, { value: \"flex-end\", displayName: \"End\" }, { value: \"stretch\", displayName: \"Stretch\" }],\r\n        value: { value: \"flex-start\", displayName: \"Start\" }\r\n    });\r\n    alignContent = new formattingSettings.ItemDropdown({\r\n        name: \"alignContent\", displayName: \"Align Content\",\r\n        items: [{ value: \"flex-start\", displayName: \"Start\" }, { value: \"center\", displayName: \"Center\" }, { value: \"flex-end\", displayName: \"End\" }, { value: \"space-between\", displayName: \"Space Between\" }, { value: \"space-around\", displayName: \"Space Around\" }, { value: \"stretch\", displayName: \"Stretch\" }],\r\n        value: { value: \"flex-start\", displayName: \"Start\" }\r\n    });\r\n    horizontalSpacing = new formattingSettings.NumUpDown({ name: \"horizontalSpacing\", displayName: \"Horizontal Spacing\", value: 5 });\r\n    verticalSpacing = new formattingSettings.NumUpDown({ name: \"verticalSpacing\", displayName: \"Vertical Spacing\", value: 5 });\r\n\r\n    name: string = \"grid\";\r\n    displayName: string = \"Grid Layout\";\r\n    slices: formattingSettings.Slice[] = [this.flexDirection, this.justifyContent, this.alignItems, this.alignContent, this.horizontalSpacing, this.verticalSpacing];\r\n}\r\n\r\nclass ContainerCard extends formattingSettings.Card {\r\n    backgroundColor = new formattingSettings.ColorPicker({ name: \"backgroundColor\", displayName: \"Background Color\", value: { value: \"#FFFFFF\" } });\r\n    borderColor = new formattingSettings.ColorPicker({ name: \"borderColor\", displayName: \"Border Color\", value: { value: \"#DDDDDD\" } });\r\n    borderWidth = new formattingSettings.NumUpDown({ name: \"borderWidth\", displayName: \"Border Width\", value: 1 });\r\n    borderRadius = new formattingSettings.NumUpDown({ name: \"borderRadius\", displayName: \"Border Radius\", value: 5 });\r\n    padding = new formattingSettings.NumUpDown({ name: \"padding\", displayName: \"Padding\", value: 10 });\r\n    shadow = new formattingSettings.TextInput({ name: \"shadow\", displayName: \"Shadow\", value: \"none\", placeholder: \"e.g., 2px 2px 5px #888888\" });\r\n    flexGrow = new formattingSettings.ToggleSwitch({ name: \"flexGrow\", displayName: \"Flex Grow\", value: false });\r\n\r\n    name: string = \"container\";\r\n    displayName: string = \"Container\";\r\n    slices: formattingSettings.Slice[] = [this.backgroundColor, this.borderColor, this.borderWidth, this.borderRadius, this.padding, this.shadow, this.flexGrow];\r\n}\r\n\r\nclass LabelCard extends formattingSettings.Card {\r\n    fontColor = new formattingSettings.ColorPicker({ name: \"fontColor\", displayName: \"Font Color\", value: { value: \"#333333\" } });\r\n    fontSize = new formattingSettings.NumUpDown({ name: \"fontSize\", displayName: \"Font Size\", value: 14 });\r\n    fontWeight = new formattingSettings.ItemDropdown({ name: \"fontWeight\", displayName: \"Font Weight\", items: [{ value: \"normal\", displayName: \"Normal\" }, { value: \"bold\", displayName: \"Bold\" }], value: { value: \"bold\", displayName: \"Bold\" } });\r\n    textAlign = new formattingSettings.ItemDropdown({ name: \"textAlign\", displayName: \"Text Align\", items: [{ value: \"left\", displayName: \"Left\" }, { value: \"center\", displayName: \"Center\" }, { value: \"right\", displayName: \"Right\" }], value: { value: \"left\", displayName: \"Left\" } });\r\n\r\n    name: string = \"label\";\r\n    displayName: string = \"Label\";\r\n    slices: formattingSettings.Slice[] = [this.fontColor, this.fontSize, this.fontWeight, this.textAlign];\r\n}\r\n\r\nclass SelectorCard extends formattingSettings.Card {\r\n    backgroundColor = new formattingSettings.ColorPicker({ name: \"backgroundColor\", displayName: \"Background Color\", value: { value: \"#FFFFFF\" } });\r\n    fontColor = new formattingSettings.ColorPicker({ name: \"fontColor\", displayName: \"Font Color\", value: { value: \"#333333\" } });\r\n    fontSize = new formattingSettings.NumUpDown({ name: \"fontSize\", displayName: \"Font Size\", value: 12 });\r\n    borderColor = new formattingSettings.ColorPicker({ name: \"borderColor\", displayName: \"Border Color\", value: { value: \"#CCCCCC\" } });\r\n    borderWidth = new formattingSettings.NumUpDown({ name: \"borderWidth\", displayName: \"Border Width\", value: 1 });\r\n    borderRadius = new formattingSettings.NumUpDown({ name: \"borderRadius\", displayName: \"Border Radius\", value: 4 });\r\n    height = new formattingSettings.NumUpDown({ name: \"height\", displayName: \"Height\", value: 40 });\r\n    arrowColor = new formattingSettings.ColorPicker({ name: \"arrowColor\", displayName: \"Arrow Color\", value: { value: \"#666666\" } });\r\n\r\n    name: string = \"selector\";\r\n    displayName: string = \"Selector\";\r\n    slices: formattingSettings.Slice[] = [this.backgroundColor, this.fontColor, this.fontSize, this.borderColor, this.borderWidth, this.borderRadius, this.height, this.arrowColor];\r\n}\r\n\r\nclass DropdownCard extends formattingSettings.Card {\r\n    itemBackgroundColor = new formattingSettings.ColorPicker({ name: \"itemBackgroundColor\", displayName: \"Item Background\", value: { value: \"#FFFFFF\" } });\r\n    itemFontColor = new formattingSettings.ColorPicker({ name: \"itemFontColor\", displayName: \"Item Font Color\", value: { value: \"#333333\" } });\r\n    itemHoverBackgroundColor = new formattingSettings.ColorPicker({ name: \"itemHoverBackgroundColor\", displayName: \"Hover Background\", value: { value: \"#e9ecef\" } });\r\n    itemHoverFontColor = new formattingSettings.ColorPicker({ name: \"itemHoverFontColor\", displayName: \"Hover Font Color\", value: { value: \"#0056b3\" } });\r\n    selectedItemBackgroundColor = new formattingSettings.ColorPicker({ name: \"selectedItemBackgroundColor\", displayName: \"Selected Background\", value: { value: \"#007bff\" } });\r\n    selectedItemFontColor = new formattingSettings.ColorPicker({ name: \"selectedItemFontColor\", displayName: \"Selected Font Color\", value: { value: \"#FFFFFF\" } });\r\n\r\n    name: string = \"dropdown\";\r\n    displayName: string = \"Dropdown Items\";\r\n    slices: formattingSettings.Slice[] = [\r\n        this.itemBackgroundColor, this.itemFontColor, \r\n        this.itemHoverBackgroundColor, this.itemHoverFontColor,\r\n        this.selectedItemBackgroundColor, this.selectedItemFontColor\r\n    ];\r\n}\r\n\r\nclass VisualFormattingSettings extends formattingSettings.Model {\r\n    slicerSettings = new SlicerSettingsCard();\r\n    grid = new GridCard();\r\n    container = new ContainerCard();\r\n    label = new LabelCard();\r\n    selector = new SelectorCard();\r\n    dropdown = new DropdownCard();\r\n\r\n    cards = [this.slicerSettings, this.grid, this.container, this.label, this.selector, this.dropdown];\r\n}\r\n\r\n/* ------------------------- VISUAL ------------------------------ */\r\n\r\n\r\n\r\nexport class Visual implements IVisual {\r\n  private host: IVisualHost;\r\n  private selectionManager: ISelectionManager; // Ainda necessário para tooltips\r\n  private container: HTMLElement;\r\n\r\n\r\n  private formattingSettings: VisualFormattingSettings;\r\n  private formattingSettingsService: FormattingSettingsService;\r\n\r\n  constructor(options: VisualConstructorOptions) {\r\n    this.host = options.host;\r\n    this.selectionManager = this.host.createSelectionManager();\r\n    this.formattingSettingsService = new FormattingSettingsService();\r\n    this.container = document.createElement(\"div\");\r\n    this.container.className = \"grid-root\";\r\n    options.element.appendChild(this.container);\r\n  }\r\n\r\n  public getFormattingModel(): powerbi.visuals.FormattingModel {\r\n      return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);\r\n  }\r\n\r\n  public update(options: VisualUpdateOptions): void {\r\n    this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettings, options.dataViews);\r\n\r\n    if (!options?.dataViews?.[0]) {\r\n        this.container.innerHTML = \"\";\r\n        return;\r\n    }\r\n\r\n    const dataView = options.dataViews[0];\r\n\r\n\r\n\r\n    const cat = dataView.categorical?.categories;\r\n    if (cat) this.renderDropdown(cat, dataView);\r\n}\r\n\r\n  private renderDropdown(categories: powerbi.DataViewCategoryColumn[], dataView: powerbi.DataView): void {\r\n    const existingSlicers = new Set<string>();\r\n    this.container.querySelectorAll('[data-slicer-name]').forEach((node: HTMLElement) => {\r\n        existingSlicers.add(node.getAttribute('data-slicer-name'));\r\n    });\r\n\r\n    const currentSlicers = new Set<string>();\r\n    \r\n    // Sort categories alphabetically by display name\r\n    const sortedCategories = [...categories].sort((a, b) => \r\n        a.source.displayName.localeCompare(b.source.displayName)\r\n    );\r\n\r\n    sortedCategories.forEach(category => {\r\n        const slicerName = category.source.displayName;\r\n        currentSlicers.add(slicerName);\r\n\r\n        let slicerContainer = this.container.querySelector(`[data-slicer-name=\"${slicerName}\"]`) as HTMLElement;\r\n        if (!slicerContainer) {\r\n            slicerContainer = this.createSlicerContainer(slicerName);\r\n            this.container.appendChild(slicerContainer);\r\n        } else {\r\n            // Update existing container styles if needed\r\n            this.applyContainerStyles(slicerContainer);\r\n        }\r\n\r\n        this.createDropdownLayout(slicerContainer, category, dataView);\r\n        this.applyLabelStyles(slicerContainer.querySelector('.slicer-header'));\r\n        this.applySelectorStyles(slicerContainer.querySelector('.custom-dropdown'));\r\n    });\r\n\r\n    // Remove old slicers\r\n    existingSlicers.forEach(slicerName => {\r\n        if (!currentSlicers.has(slicerName)) {\r\n            const oldSlicer = this.container.querySelector(`[data-slicer-name=\"${slicerName}\"]`);\r\n            if (oldSlicer) {\r\n                this.container.removeChild(oldSlicer);\r\n            }\r\n        }\r\n    });\r\n\r\n    this.applyGridStyles();\r\n  }\r\n\r\n  private applyGridStyles() {\r\n    const g = this.formattingSettings.grid;\r\n    this.container.style.flexDirection = g.flexDirection.value.value as string;\r\n    this.container.style.justifyContent = g.justifyContent.value.value as string;\r\n    this.container.style.alignItems = g.alignItems.value.value as string;\r\n    this.container.style.alignContent = g.alignContent.value.value as string;\r\n    this.container.style.gap = `${g.verticalSpacing.value}px ${g.horizontalSpacing.value}px`;\r\n  }\r\n\r\n  private createSlicerContainer(slicerName: string): HTMLElement {\r\n      const slicerContainer = document.createElement(\"div\");\r\n      slicerContainer.className = \"slicer-container\";\r\n      slicerContainer.setAttribute(\"data-slicer-name\", slicerName);\r\n      this.applyContainerStyles(slicerContainer);\r\n      return slicerContainer;\r\n  }\r\n\r\n  private applyContainerStyles(element: HTMLElement) {\r\n      if (!element) return;\r\n      const c = this.formattingSettings.container;\r\n      element.style.backgroundColor = c.backgroundColor.value.value;\r\n      element.style.border = `${c.borderWidth.value}px solid ${c.borderColor.value.value}`;\r\n      element.style.borderRadius = `${c.borderRadius.value}px`;\r\n      element.style.boxShadow = c.shadow.value;\r\n      element.style.padding = `${c.padding.value}px`;\r\n      element.style.flexGrow = c.flexGrow.value ? '1' : '0';\r\n  }\r\n\r\n  private applyLabelStyles(element: HTMLElement) {\r\n    if (!element) return;\r\n    const l = this.formattingSettings.label;\r\n    element.style.color = l.fontColor.value.value;\r\n    element.style.fontSize = `${l.fontSize.value}px`;\r\n    element.style.fontWeight = l.fontWeight.value.value as string;\r\n    element.style.textAlign = l.textAlign.value.value as string;\r\n  }\r\n\r\n  private applySelectorStyles(element: HTMLElement) {\r\n    if (!element) return;\r\n    const s = this.formattingSettings.selector;\r\n    const header = element.querySelector('.dropdown-header') as HTMLElement;\r\n    if (header) {\r\n        header.style.backgroundColor = s.backgroundColor.value.value;\r\n        header.style.border = `${s.borderWidth.value}px solid ${s.borderColor.value.value}`;\r\n        header.style.borderRadius = `${s.borderRadius.value}px`;\r\n        header.style.height = `${s.height.value}px`;\r\n    }\r\n    const text = element.querySelector('.header-text') as HTMLElement;\r\n    if (text) {\r\n        text.style.color = s.fontColor.value.value;\r\n        text.style.fontSize = `${s.fontSize.value}px`;\r\n    }\r\n    const arrow = element.querySelector('.arrow-down') as HTMLElement;\r\n    if (arrow) {\r\n        arrow.style.borderTopColor = s.arrowColor.value.value;\r\n    }\r\n  }\r\n\r\n  private applyDropdownStyles(element: HTMLElement) {\r\n    if (!element) return;\r\n    const d = this.formattingSettings.dropdown;\r\n    element.style.setProperty('--item-bg-color', d.itemBackgroundColor.value.value);\r\n    element.style.setProperty('--item-font-color', d.itemFontColor.value.value);\r\n    element.style.setProperty('--item-hover-bg-color', d.itemHoverBackgroundColor.value.value);\r\n    element.style.setProperty('--item-hover-font-color', d.itemHoverFontColor.value.value);\r\n    element.style.setProperty('--selected-bg-color', d.selectedItemBackgroundColor.value.value);\r\n    element.style.setProperty('--selected-font-color', d.selectedItemFontColor.value.value);\r\n  }\r\n\r\n  private createDropdownLayout(container: HTMLElement, category: powerbi.DataViewCategoryColumn, dataView: powerbi.DataView) {\r\n    // Clear existing event listeners\r\n    const oldDropdownContainer = container.querySelector(\".custom-dropdown\") as HTMLElement;\r\n    if (oldDropdownContainer) {\r\n        const oldHeader = oldDropdownContainer.querySelector(\".dropdown-header\") as HTMLElement;\r\n        const oldList = oldDropdownContainer.querySelector(\".dropdown-list-container\") as HTMLElement;\r\n        if (oldHeader) {\r\n            const newHeader = oldHeader.cloneNode(true);\r\n            oldHeader.parentNode.replaceChild(newHeader, oldHeader);\r\n        }\r\n        if (oldList) {\r\n            oldList.classList.remove('open');\r\n        }\r\n    }\r\n\r\n    let label = container.querySelector(\".slicer-header\") as HTMLElement;\r\n    if (!label) {\r\n        label = document.createElement(\"div\");\r\n        label.className = \"slicer-header\";\r\n        container.appendChild(label);\r\n    }\r\n    label.textContent = category.source.displayName;\r\n\r\n    let dropdownContainer = container.querySelector(\".custom-dropdown\") as HTMLElement;\r\n    if (!dropdownContainer) {\r\n        dropdownContainer = document.createElement(\"div\");\r\n        dropdownContainer.className = \"custom-dropdown\";\r\n        container.appendChild(dropdownContainer);\r\n    }\r\n\r\n    let dropdownHeader = dropdownContainer.querySelector(\".dropdown-header\") as HTMLElement;\r\n    if (!dropdownHeader) {\r\n        dropdownHeader = document.createElement(\"div\");\r\n        dropdownHeader.className = \"dropdown-header\";\r\n        dropdownContainer.appendChild(dropdownHeader);\r\n    }\r\n\r\n    let headerText = dropdownHeader.querySelector(\".header-text\") as HTMLElement;\r\n    if (!headerText) {\r\n        headerText = document.createElement(\"span\");\r\n        headerText.className = \"header-text\";\r\n        dropdownHeader.appendChild(headerText);\r\n    }\r\n\r\n    let arrow = dropdownHeader.querySelector(\".arrow-down\") as HTMLElement;\r\n    if (!arrow) {\r\n        arrow = document.createElement(\"div\");\r\n        arrow.className = \"arrow-down\";\r\n        dropdownHeader.appendChild(arrow);\r\n    }\r\n\r\n    let dropdownListContainer = dropdownContainer.querySelector(\".dropdown-list-container\") as HTMLElement;\r\n    if (!dropdownListContainer) {\r\n        dropdownListContainer = document.createElement(\"div\");\r\n        dropdownListContainer.className = \"dropdown-list-container\";\r\n        dropdownContainer.appendChild(dropdownListContainer);\r\n    }\r\n\r\n    // Ensure dropdown is closed initially\r\n    dropdownListContainer.classList.remove('open');\r\n\r\n    // Toggle dropdown visibility\r\n    dropdownHeader.onclick = (event) => {\r\n        event.stopPropagation();\r\n        const isOpen = dropdownListContainer.classList.toggle('open');\r\n        if (isOpen) {\r\n            document.addEventListener('click', closeDropdownOnOutsideClick, true);\r\n        } else {\r\n            document.removeEventListener('click', closeDropdownOnOutsideClick, true);\r\n        }\r\n    };\r\n\r\n    const closeDropdownOnOutsideClick = (event: MouseEvent) => {\r\n        if (!dropdownContainer.contains(event.target as Node)) {\r\n            dropdownListContainer.classList.remove('open');\r\n            document.removeEventListener('click', closeDropdownOnOutsideClick, true);\r\n        }\r\n    };\r\n\r\n    this.populateDropdownOptions(dropdownListContainer, category, dataView);\r\n    this.updateHeaderText(headerText, dataView);\r\n\r\n    // Apply styles after elements are created or updated\r\n    this.applyLabelStyles(label);\r\n    this.applySelectorStyles(dropdownContainer);\r\n    this.applyDropdownStyles(dropdownListContainer);\r\n  }\r\n\r\n  private populateDropdownOptions(content: HTMLElement, category: powerbi.DataViewCategoryColumn, dataView: powerbi.DataView) {\r\n    content.innerHTML = ''; // Clear existing options\r\n\r\n    const searchInput = document.createElement(\"input\");\r\n    searchInput.type = \"text\";\r\n    searchInput.placeholder = \"Buscar opções...\";\r\n    searchInput.className = \"search-input\";\r\n    searchInput.onkeyup = () => {\r\n        const filter = searchInput.value.toUpperCase();\r\n        const options = content.querySelectorAll(\".dropdown-option\");\r\n        options.forEach(option => {\r\n            const txtValue = option.textContent || \"\";\r\n            (option as HTMLElement).style.display = txtValue.toUpperCase().indexOf(filter) > -1 ? \"\" : \"none\";\r\n        });\r\n    };\r\n    content.appendChild(searchInput);\r\n\r\n    // 'All' Option\r\n    this.createOption(content, \"All\", 0, category, dataView, true);\r\n\r\n    // Data Options\r\n    const valueMap = new Map<any, { value: powerbi.PrimitiveValue, index: number }>();\r\n    category.values.forEach((value, index) => {\r\n        const key = value instanceof Date ? value.getTime() : value;\r\n        if (!valueMap.has(key)) {\r\n            valueMap.set(key, { value, index });\r\n        }\r\n    });\r\n\r\n    Array.from(valueMap.values()).forEach(({ value, index }) => {\r\n        let displayValue;\r\n        if (value instanceof Date) {\r\n            const date = new Date(value);\r\n            date.setUTCHours(0, 0, 0, 0);\r\n            displayValue = date.toLocaleDateString(); // Formato mais amigável\r\n        } else {\r\n            displayValue = (value !== null && value !== undefined && value !== '') ? String(value) : `Item ${index + 1}`;\r\n        }\r\n        this.createOption(content, displayValue, index, category, dataView, false);\r\n    });\r\n  }\r\n\r\n  private createOption(container: HTMLElement, name: string, index: number, category: powerbi.DataViewCategoryColumn, dataView: powerbi.DataView, isAllOption: boolean) {\r\n      const option = document.createElement(\"div\");\r\n      option.className = \"dropdown-option\";\r\n      option.textContent = name;\r\n\r\n      let selectionId: powerbi.visuals.ISelectionId | null = null;\r\n      let isSelected = false;\r\n      \r\n      if (!isAllOption) {\r\n          selectionId = this.host.createSelectionIdBuilder()\r\n              .withCategory(category, index)\r\n              .createSelectionId();\r\n          \r\n          isSelected = this.selectionManager.getSelectionIds()\r\n                .some(selectedId => {\r\n                    return JSON.stringify(selectedId) === JSON.stringify(selectionId);\r\n                });\r\n      } else {\r\n          // Para \"Todos\", está selecionado se não há seleções ativas\r\n          isSelected = this.selectionManager.getSelectionIds().length === 0;\r\n      }\r\n\r\n      if (isSelected) {\r\n          option.classList.add(\"selected\");\r\n      }\r\n\r\n      option.onclick = async (event) => {\r\n            event.stopPropagation();\r\n            const multiSelect = this.formattingSettings.slicerSettings.multiSelect.value;\r\n            \r\n            try {\r\n                if (isAllOption) {\r\n                    await this.selectionManager.clear();\r\n                } else if (selectionId) {\r\n                    await this.selectionManager.select(selectionId, multiSelect);\r\n                }\r\n                \r\n                // Atualizar UI após seleção\r\n                const dropdownContainer = container.closest('.custom-dropdown') as HTMLElement;\r\n                if (dropdownContainer) {\r\n                    this.updateSelectionUI(dropdownContainer, dataView);\r\n                }\r\n                \r\n                // Notificar o Power BI sobre a mudança de seleção\r\n                this.host.persistProperties({\r\n                    merge: [{\r\n                        objectName: \"general\",\r\n                        properties: {\r\n                            selection: JSON.stringify(this.selectionManager.getSelectionIds())\r\n                        },\r\n                        selector: null\r\n                    }]\r\n                });\r\n            } catch (error) {\r\n                console.error('Erro na seleção:', error);\r\n            }\r\n        };\r\n\r\n      container.appendChild(option);\r\n  }\r\n\r\n\r\n\r\n  private updateHeaderText(headerText: HTMLElement, dataView: powerbi.DataView) {\r\n        const selectedValues: string[] = [];\r\n        const selectionIds = this.selectionManager.getSelectionIds();\r\n        \r\n        if (selectionIds.length === 0) {\r\n            headerText.textContent = \"Todos\";\r\n            return;\r\n        }\r\n        \r\n        const category = dataView.categorical.categories[0];\r\n        for (let i = 0; i < category.values.length; i++) {\r\n            const selectionId = this.host.createSelectionIdBuilder()\r\n                .withCategory(category, i)\r\n                .createSelectionId();\r\n            \r\n            const isSelected = selectionIds.some(selectedId => {\r\n                return JSON.stringify(selectedId) === JSON.stringify(selectionId);\r\n            });\r\n            \r\n            if (isSelected) {\r\n                let value = category.values[i];\r\n                if (value instanceof Date) {\r\n                    value = value.toLocaleDateString('pt-BR');\r\n                }\r\n                selectedValues.push(String(value));\r\n            }\r\n        }\r\n        \r\n        if (selectedValues.length === 1) {\r\n            headerText.textContent = selectedValues[0];\r\n        } else {\r\n            headerText.textContent = `${selectedValues.length} selecionados`;\r\n        }\r\n    }\r\n\r\n  private updateSelectionUI(dropdownContainer: HTMLElement, dataView: powerbi.DataView) {\r\n    const headerText = dropdownContainer.querySelector('.header-text') as HTMLElement;\r\n    const options = dropdownContainer.querySelectorAll('.dropdown-option');\r\n    \r\n    // Atualizar header\r\n    if (headerText) {\r\n        this.updateHeaderText(headerText, dataView);\r\n    }\r\n    \r\n    // Atualizar classes selected nas opções\r\n    const selectionIds = this.selectionManager.getSelectionIds();\r\n    const category = dataView.categorical.categories[0];\r\n    \r\n    options.forEach((option, idx) => {\r\n        const isAllOption = idx === 1; // Primeira opção após search é \"Todos\"\r\n        \r\n        if (isAllOption) {\r\n            // Opção \"Todos\" está selecionada se não há seleções\r\n            if (selectionIds.length === 0) {\r\n                option.classList.add('selected');\r\n            } else {\r\n                option.classList.remove('selected');\r\n            }\r\n        } else {\r\n            // Para opções de dados, verificar se está selecionada\r\n            const dataIndex = idx - 2; // Ajustar índice (search + todos)\r\n            if (dataIndex >= 0 && dataIndex < category.values.length) {\r\n                const selectionId = this.host.createSelectionIdBuilder()\r\n                    .withCategory(category, dataIndex)\r\n                    .createSelectionId();\r\n                \r\n                const isSelected = selectionIds.some(selectedId => {\r\n                    return JSON.stringify(selectedId) === JSON.stringify(selectionId);\r\n                });\r\n                \r\n                if (isSelected) {\r\n                    option.classList.add('selected');\r\n                } else {\r\n                    option.classList.remove('selected');\r\n                }\r\n            }\r\n        }\r\n    });\r\n  }\r\n\r\n\r\n  public destroy(): void { /* cleanup */ }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar GridSlicer_guid_placeholder_DEBUG: IVisualPlugin = {\n    name: 'GridSlicer_guid_placeholder_DEBUG',\n    displayName: 'Grid Slicer',\n    class: 'Visual',\n    apiVersion: '5.7.0',\n    create: (options?: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = (<any>globalThis).dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"GridSlicer_guid_placeholder_DEBUG\"] = GridSlicer_guid_placeholder_DEBUG;\n}\nexport default GridSlicer_guid_placeholder_DEBUG;"],"names":[],"sourceRoot":""}